use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeCallable()", proc()
    test("when callable, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(nop)
        out = w.toBeCallable()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when not callable, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("").toBeCallable())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be callable")
    end)
  end)

  suite("notToBeCallable()", proc()
    test("when not callable, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("nop")
        out = w.notToBeCallable()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when callable, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(nop).notToBeCallable())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be callable")
    end)
  end)
end)
