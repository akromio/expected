use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toEndWith()", proc()
    test("when ended with, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("ciao mondo!")
        out = w.toEndWith("mondo!")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when not ended with, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("ciao mondo!").toEndWith("MONDO!"))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should end with")
    end)
  end)

  suite("notToEndWith()", proc()
    test("when not ended with, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("ciao mondo!")
        out = w.notToEndWith("MONDO!")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when ended with, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("ciao mondo!").notToEndWith("mondo!"))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not end with")
    end)
  end)
end)
