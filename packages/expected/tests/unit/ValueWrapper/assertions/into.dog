use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("into", proc()
    test("when in, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("two")
        out = w.into(["one", "two", "three"])
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when not in, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(0).into([1, 2, 3]))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be in")
    end)
  end)

  suite("notInto()", proc()
    test("when not in, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("two")
        out = w.notInto(["one", "three"])
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when in, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(2).notInto([1, 2, 3]))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be in")
    end)
  end)
end)
