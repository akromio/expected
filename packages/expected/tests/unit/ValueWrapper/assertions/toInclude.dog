use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toInclude()", proc()
    test("when included, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(["one", "two", "three"])
        out = w.toInclude("two")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when not included, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected([0, 1, 2]).toInclude(3))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should include")
    end)
  end)

  suite("notToInclude()", proc()
    test("when not included, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(["one", "two", "three"])
        out = w.notToInclude(1)
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when included, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected([0, 1, 2]).notToInclude(1))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not include")
    end)
  end)
end)
