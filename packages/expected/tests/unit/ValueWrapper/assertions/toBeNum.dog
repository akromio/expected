use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeNum()", proc()
    test("when num, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(0)
        out = w.toBeNum()
      )

      # (2) assessment
      assert.strictEqual(out, w)
    end)

    test("when not num, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("0").toBeNum())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be a number.")
    end)
  end)
  
  suite("notToBeNum()", proc()
    test("when not num, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("0")
        out = w.notToBeNum()
      )

      # (2) assessment
      assert.strictEqual(out, w)
    end)

    test("when num, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(0).notToBeNum())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be a number")
    end)
  end)
end)
