use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toHaveLen()", proc()
    test("when length equal to passed size, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = 1, y = 2)
        out = w.toHaveLen(2)
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)
    
    test("when not length, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected({x = 1, y = 2}).toHaveLen(1))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should have length to")
    end)
  end)

  suite("notToHaveLen()", proc()
    test("when not length, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected({x = 1, y = 2})
        out = w.notToHaveLength(1)
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when length, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected({x = 1, y = 2}).notToHaveLength(2))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not have length to")
    end)
  end)
end)
