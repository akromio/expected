use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeNil()", proc()
    test("when value is nil, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(nil)
        out = w.toBeNil()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when value is not nil, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(0).toBeNil())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be nil")
    end)
  end)

  suite("notToBeNil()", proc()
    test("when value is not nil, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(0)
        out = w.notToBeNil()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when value is nil, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(nil).notToBeNil())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be nil/null")
    end)
  end)
end)
