use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeEmpty()", proc()
    test("when empty, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([])
        out = w.toBeEmpty()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when not empty, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("xyz").toBeEmpty())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be empty.")
    end)
  end)

  suite("notToBeEmpty()", proc()
    test("when not empty, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([1])
        out = w.notToBeEmpty()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when empty, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("").notToBeEmpty())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be empty.")
    end)
  end)
end)
