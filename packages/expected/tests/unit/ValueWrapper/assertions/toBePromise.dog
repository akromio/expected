use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBePromise()", proc()
    test("when promise, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(promise.resolve())
        out = w.toBePromise()
      )

      # (2) assessment
      assert.strictEqual(out, w)
    end)

    test("when not promise, assertion error must be raised", proc()
      # (1) act
      const (
        w = expected(123)
        out = peval(w.toBePromise())
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be a promise")
    end)
  end)

  suite("notToBePromise()", proc()
    test("when not promise, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(123)
        out = w.notToBePromise()
      )

      # (2) assessment
      assert.strictEqual(out, w)
    end)

    test("when promise, assertion error must be raised", proc()
      # (1) act
      const (
        w = expected(promise.resolve())
        out = peval(w.notToBePromise())
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be a promise")
    end)
  end)
end)
