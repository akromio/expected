use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  {Duplex} = dep://stream
  expected = ~
)

suite(__filename, proc()
  suite("toBeDuplexStream()", proc()
    test("when duplex stream, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(native("new Duplex()"))
        out = w.toBeDuplexStream()
      )

      # (2) assessment
      assert.strictEqual(out, w)
    end)

    test("when not duplex stream, error must be returned", proc()
      # (1) act
      const (
        w = expected("")
        out = peval(w.toBeDuplexStream())
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be a duplex stream")
    end)
  end)

  suite("notToBeDuplexStream()", proc()
    test("when not duplex stream, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("")
        out = w.notToBeDuplexStream()
      )

      # (2) assessment
      assert.strictEqual(out, w)
    end)

    test("when duplex stream, error must be returned", proc()
      # (1) act
      const (
        w = expected(native("new Duplex()"))
        out = peval(w.notToBeDuplexStream())
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be a duplex stream")
    end)
  end)
end)