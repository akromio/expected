use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeFn()", proc()
    test("when fn, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(nop)
        out = w.toBeFn()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when not fn, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected("").toBeFn())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be a function")
    end)
  end)

  suite("notToBeFn()", proc()
    test("when not fn, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected("nop")
        out = w.notToBeFn()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when fn, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(nop).notToBeFn())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be a function")
    end)
  end)
end)
