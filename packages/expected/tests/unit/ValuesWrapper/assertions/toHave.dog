use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toHave()", proc()
    test("when only one property name passed and exists, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([{x = 1}, {x = 2}, {x = 3}]).items(0, 1)
        out = w.toHave("x")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when several property names passed and exist, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([{x = 1, y = 2}, {x = "a", y = "b"}]).items(0, 1)
        out = w.toHave(["x", "y"])
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when properties passed as map and equal, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([{x = 1, y = 2}, {x = 2, y = 2}]).items(0, 1)
        out = w.toHave(y = 2)
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when only one property name passed not exists in some, assertion error must be raised", proc()
      # (1) act
      const (
        w = expected([{x = 1}, {}]).items(0, 1)
        out = peval(w.toHave("x"))
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should have member")
    end)

    test("when property names passed and some not exists, assertion error must be raised", proc()
      # (1) act
      const (
        w = expected([{x = 1}, {x = 2}]).items(0, 1)
        out = peval(w.toHave(["x", "b"]))
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should have member")
    end)

    test("when property passed as map and different in some, assertion error must be raised", proc()
      # (1) act
      const (
        w = expected([{x = 1}, {y = 2}]).items(0, 1)
        out = peval(w.toHave(x = 1))
      )

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should have")
    end)
  end)

  suite("notToHave", proc()
    test("when property name passed and not exists in all, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([{}, {}]).items(0, 1)
        out = w.notToHave("x")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when property names passed and not exist in all, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([{}, {}]).items(0, 1)
        out = w.notToHave(["x", "y"])
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when properties passed as map and not equal in all, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected([{x = 1, y = 2}, {}]).items(0, 1)
        out = w.notToHave(x = 2, y = 1)
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when property name passed and exists in some, error must be raised", proc()
      # (1) act
      const out = peval(expected([{}, {x = 1}]).items(0, 1).notToHave("x"))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not have member")
    end)

    test("when properties passed as object and some equal, error must be raised", proc()
      # (1) act
      const out = peval(expected([{}, {x = 0}]).items(0, 1).notToHave(x = 0, y = 2))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not have")
    end)
  end)
end)
