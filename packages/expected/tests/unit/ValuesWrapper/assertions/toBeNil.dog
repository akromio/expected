use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeNil()", proc()
    test("when values are nil, wrapper must be returned", proc()
      # (1) act
      const (
        value = {x = nil, y = nil, z = 33}
        w = expected(value).members("x", "y")
        out = w.toBeNil()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value is not nil, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = nil, y = 22, z = 33).members("x", "y").toBeNil())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be nil/null")
    end)
  end)

  suite("notToBeNil()", proc()
    test("when values are not nil, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = 11, y = 22, z = 33).members("x", "y")
        out = w.notToBeNil()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value is nil, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = 11, y = nil, z = 33).members("x", "y").notToBeNil())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be nil/null")
    end)
  end)
end)
