use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("like()", proc()
    test("when values are like, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = "a", y = "b", z = "c").members("x", "y")
        out = w.like("[ab]")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value not like, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = "a", y = "b", z = "c").members("x", "y").like("[aB]"))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be like")
    end)
  end)

  suite("notLike()", proc()
    test("when values are not like, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = "a", y = "b", z = "c").members("x", "y")
        out = w.notLike("AO")
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value is like, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = "a", y = "b", z = "c").members("x", "y").notLike("[Ab]"))

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be like")
    end)
  end)
end)
