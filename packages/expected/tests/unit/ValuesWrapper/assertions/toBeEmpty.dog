use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeEmpty()", proc()
    test("when values are empty, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = "", y = "", z = "").members("x", "y")
        out = w.toBeEmpty()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some vlaue is not empty, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = "", y = "123", z = "").members("x", "y").toBeEmpty())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be empty.")
    end)
  end)

  suite("notToBeEmpty()", proc()
    test("when values are not empty, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = "a", y = "b", z = "c").members("x", "y")
        out = w.notToBeEmpty()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value is empty, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = "a", y = "", z = "c").members("x", "y").notToBeEmpty())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be empty.")
    end)
  end)
end)
