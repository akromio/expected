use (
  {AssertionError} = dep://assert
  {assert} = dep://chai
  expected = ~
)

suite(__filename, proc()
  suite("toBeBool()", proc()
    test("when values are bool, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = true, y = false, z = true).members("x", "y")
        out = w.toBeBool()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value is not bool, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = true, y = "false", z = true).members("x", "y").toBeBool())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should be boolean")
    end)
  end)

  suite("notToBeBool()", proc()
    test("when values are not bool, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected(x = "true", y = "false", z = "true").members("x", "y")
        out = w.notToBeBool()
      )

      # (2) assessment
      assert.strictEqual(w, out)
    end)

    test("when some value is bool, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected(x = "true", y = false, z = "true").members("x", "y").notToBeBool())

      # (2) assessment
      assert.equal(out[0], false)
      assert.instanceOf(out[1], AssertionError)
      assert.include(out[1].message, "should not be bool")
    end)
  end)
end)
