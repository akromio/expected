use (
  {AssertionError} = dep://assert
  alias://expected
  dep://path
)

suite(__filename, proc()
  suite("equalToFile()", proc()
    test("when file is equal to another, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected.file(__filename)
        out = w.equalToFile(__filename)
      )

      # (2) assessment
      expected(out).sameAs(w)
    end)

    test("when file isn't equal to another, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected.file(__filename).equalToFile(path.join(__dirname, "./equalTo.js")))

      # (2) assessment
      expected(out).it(0).equalTo(false).it(1).toBe(AssertionError).like("should be same as file")
    end)
  end)

  suite("notEqualToFile()", proc()
    test("when file isn't equal to another, wrapper must be returned", proc()
      # (1) act
      const (
        w = expected.file(__filename)
        out = w.notEqualToFile(path.join(__dirname, "equalTo.js"))
      )

      # (2) assessment
      expected(out).sameAs(w)
    end)

    test("when file is equal to another, assertion error must be raised", proc()
      # (1) act
      const out = peval(expected.file(__filename).notEqualToFile(__filename))

      # (2) assessment
      expected(out).it(0).equalTo(false).it(1).toBe(AssertionError).like("should not be same as file")
    end)
  end)
end)
